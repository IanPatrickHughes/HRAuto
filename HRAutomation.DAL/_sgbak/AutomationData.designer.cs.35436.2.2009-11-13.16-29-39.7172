#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HRAutomation.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="HRAutomation")]
	public partial class AutomationDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertInterfaceRecord(InterfaceRecord instance);
    partial void UpdateInterfaceRecord(InterfaceRecord instance);
    partial void DeleteInterfaceRecord(InterfaceRecord instance);
    #endregion
		
		public AutomationDataDataContext() : 
				base(global::HRAutomation.DAL.Properties.Settings.Default.HRAutomationConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AutomationDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AutomationDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AutomationDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AutomationDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<InterfaceRecord> InterfaceRecords
		{
			get
			{
				return this.GetTable<InterfaceRecord>();
			}
		}
	}
	
	[Table(Name="dbo.InterfaceRecords")]
	public partial class InterfaceRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecordID;
		
		private string _VendorName;
		
		private string _VendorFileName;
		
		private System.Data.Linq.Binary _iVantageFile;
		
		private string _iVantageFileName;
		
		private System.Data.Linq.Binary _EncryptedFile;
		
		private string _EncryptedFileName;
		
		private string _Message;
		
		private System.DateTime _DateOfAction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecordIDChanging(int value);
    partial void OnRecordIDChanged();
    partial void OnVendorNameChanging(string value);
    partial void OnVendorNameChanged();
    partial void OnVendorFileNameChanging(string value);
    partial void OnVendorFileNameChanged();
    partial void OniVantageFileChanging(System.Data.Linq.Binary value);
    partial void OniVantageFileChanged();
    partial void OniVantageFileNameChanging(string value);
    partial void OniVantageFileNameChanged();
    partial void OnEncryptedFileChanging(System.Data.Linq.Binary value);
    partial void OnEncryptedFileChanged();
    partial void OnEncryptedFileNameChanging(string value);
    partial void OnEncryptedFileNameChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnDateOfActionChanging(System.DateTime value);
    partial void OnDateOfActionChanged();
    #endregion
		
		public InterfaceRecord()
		{
			OnCreated();
		}
		
		[Column(Storage="_RecordID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecordID
		{
			get
			{
				return this._RecordID;
			}
			set
			{
				if ((this._RecordID != value))
				{
					this.OnRecordIDChanging(value);
					this.SendPropertyChanging();
					this._RecordID = value;
					this.SendPropertyChanged("RecordID");
					this.OnRecordIDChanged();
				}
			}
		}
		
		[Column(Storage="_VendorName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string VendorName
		{
			get
			{
				return this._VendorName;
			}
			set
			{
				if ((this._VendorName != value))
				{
					this.OnVendorNameChanging(value);
					this.SendPropertyChanging();
					this._VendorName = value;
					this.SendPropertyChanged("VendorName");
					this.OnVendorNameChanged();
				}
			}
		}
		
		[Column(Storage="_VendorFileName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string VendorFileName
		{
			get
			{
				return this._VendorFileName;
			}
			set
			{
				if ((this._VendorFileName != value))
				{
					this.OnVendorFileNameChanging(value);
					this.SendPropertyChanging();
					this._VendorFileName = value;
					this.SendPropertyChanged("VendorFileName");
					this.OnVendorFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_iVantageFile", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary iVantageFile
		{
			get
			{
				return this._iVantageFile;
			}
			set
			{
				if ((this._iVantageFile != value))
				{
					this.OniVantageFileChanging(value);
					this.SendPropertyChanging();
					this._iVantageFile = value;
					this.SendPropertyChanged("iVantageFile");
					this.OniVantageFileChanged();
				}
			}
		}
		
		[Column(Storage="_iVantageFileName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string iVantageFileName
		{
			get
			{
				return this._iVantageFileName;
			}
			set
			{
				if ((this._iVantageFileName != value))
				{
					this.OniVantageFileNameChanging(value);
					this.SendPropertyChanging();
					this._iVantageFileName = value;
					this.SendPropertyChanged("iVantageFileName");
					this.OniVantageFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_EncryptedFile", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary EncryptedFile
		{
			get
			{
				return this._EncryptedFile;
			}
			set
			{
				if ((this._EncryptedFile != value))
				{
					this.OnEncryptedFileChanging(value);
					this.SendPropertyChanging();
					this._EncryptedFile = value;
					this.SendPropertyChanged("EncryptedFile");
					this.OnEncryptedFileChanged();
				}
			}
		}
		
		[Column(Storage="_EncryptedFileName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string EncryptedFileName
		{
			get
			{
				return this._EncryptedFileName;
			}
			set
			{
				if ((this._EncryptedFileName != value))
				{
					this.OnEncryptedFileNameChanging(value);
					this.SendPropertyChanging();
					this._EncryptedFileName = value;
					this.SendPropertyChanged("EncryptedFileName");
					this.OnEncryptedFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_Message", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[Column(Storage="_DateOfAction", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfAction
		{
			get
			{
				return this._DateOfAction;
			}
			set
			{
				if ((this._DateOfAction != value))
				{
					this.OnDateOfActionChanging(value);
					this.SendPropertyChanging();
					this._DateOfAction = value;
					this.SendPropertyChanged("DateOfAction");
					this.OnDateOfActionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
